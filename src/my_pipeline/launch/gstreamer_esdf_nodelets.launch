<launch>
<arg name="odom_topic" value="/orb_slam2_cuda/odometry" />

    <arg name="cam_name" value="s20cam_wide" />

    <arg name="vocabulary_path" default="$(find orb_slam2_cuda)/Vocabulary/ORBvoc.txt" />
    <arg name="camera_setting_path" default="$(find my_pipeline)/calibration/s20.yaml" />
    <arg name="bUseViewer" default="true" />
    <arg name="bEnablePublishROSTopic" default="true" />

    <arg name="manager" default="manager" />
    <arg name="output_dest" default="screen" />
    <arg name="load_params" default="true" />
    <arg name="param_file" default="flame_nodelet_airsim.yaml" />
    <arg name="bag_data" default="false" />

  <arg name="map_size_x" value="70.0"/>
  <arg name="map_size_y" value="70.0"/>
  <arg name="map_size_z" value="10.0"/>


  <!-- topic of your odometry such as VIO or LIO -->

  <!--<node pkg="image_proc" type="image_proc" name="creative_image_proc"
        ns="$(arg cam_name)" />-->

    <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 world navigation 100" />
    <node pkg="tf" type="static_transform_publisher" name="tf_world_to_enu" args="0 0 0 0 0 0 world world_enu 100" />

      <arg name="world_frame_id" default="world" />
      <arg name="camera_world_frame_id" default="camera_world" />
          <node pkg="tf2_ros" type="static_transform_publisher" name="camera_world_to_world"
               args="0.0 0.0 0.0 0.5 -0.5 0.5 -0.5 $(arg world_frame_id) $(arg camera_world_frame_id)" >
          </node>
        <!-- Launch the nodelet manager. -->
        <node
              pkg="nodelet" type="nodelet" name="$(arg manager)"
              args="manager" output="$(arg output_dest)" >
        </node>

      <node name="orb_slam2_cuda" pkg="nodelet" type="nodelet" output="screen" args="load orb_slam2_cuda/ORBSLAMNodelet /$(arg manager)">
    	    <param name="vocabulary_path" value="$(arg vocabulary_path)"/>
    	    <param name="camera_setting_path" value="$(arg camera_setting_path)"/>
            <remap from="/camera/image_raw" to="/$(arg cam_name)/image_rect"/>
            <remap from="/transform" to="/orb_slam2/transform"/>
        </node>

<group ns = "flame">
        <node pkg="nodelet" type="nodelet" name="flame_nodelet"
              args="load flame_ros/FlameNodelet /$(arg manager)"
              output="$(arg output_dest)" >
          <rosparam command="load" if="$(arg load_params)" file="$(find my_pipeline)/cfg/$(arg param_file)"/>
          <remap from="/image" to="/$(arg cam_name)/image_rect" />
         <remap from="/info" to="/$(arg cam_name)/camera_info" />
          <remap from="/transform" to="/orb_slam2/transform"/>
          <remap from="keyframes" to="keyframes" />
        </node>
</group>

      <node pkg="nodelet" type="nodelet"
            name="GSCamNodelet"
            args="load gscam/GSCamNodelet /$(arg manager)"
            output="screen">
            <param name="camera_name" value="$(arg cam_name)"/>
            <param name="camera_info_url" value="package://my_pipeline/calibration/ost.yaml" />
            <param name="gscam_config" value="rtspsrc location=rtsp://146.169.143.115:5554/playlist.m3u latency=100  ! typefind ! rtph264depay ! h264parse ! avdec_h264  ! videoconvert"/>
            <!-- value="rtspsrc location=rtsp://146.169.143.115:5554/playlist.m3u latency=100   ! rtph264depay ! nvv4l2decoder ! nvvideoconvert ! videoconvert-->
            <param name="frame_id" value="$(arg cam_name)"/>
            <remap from="camera/image_raw" to="/$(arg cam_name)/image_raw" />
          </node>

        <node pkg="nodelet" type="nodelet" name="debayer"
              args="load image_proc/debayer /$(arg manager) " >
          <remap from="image_raw" to="/$(arg cam_name)/image_raw" />
          <remap from="image_mono" to="/$(arg cam_name)/image_mono" />
          <remap from="camera_info" to="/$(arg cam_name)/camera_info" />
        </node>


        <node pkg="nodelet" type="nodelet" name="rectify_mono"
              args="load image_proc/rectify /$(arg manager) " >
          <remap from="image_mono" to="/$(arg cam_name)/image_mono" />
          <remap from="image_rect" to="/$(arg cam_name)/image_rect" />
        </node>

        <include file="$(find my_pipeline)/launch/algorithm_only_esdf_nodelet.xml">
            <arg name="manager" value="$(arg manager)"/>

            <arg name="map_size_x_" value="$(arg map_size_x)"/>
            <arg name="map_size_y_" value="$(arg map_size_y)"/>
            <arg name="map_size_z_" value="$(arg map_size_z)"/>
            <arg name="odometry_topic" value="$(arg odom_topic)"/>

            <!-- sensor pose: transform of camera frame in the world frame -->
            <arg name="sensor_pose_topic" value="/transform_rgb_frame"/>
            <!-- depth topic: depth image, 640x480 by default -->
            <!-- cloud topic: point cloud measurement  -->
            <!-- subscribe ONLY TO ONE of the two topics -->
            <arg name="depth_topic" value="/flame/depth_registered/image_rect"/>
            <arg name="semantic_topic" value="/semantic"/>
            <arg name="cloud_topic" value="/none"/>

            <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="333.3461"/>
    <arg name="cy" value="251.44796"/>
    <arg name="fx" value="497.24344"/>
    <arg name="fy" value="497.48286"/>
          </include>


  <node name="performance_meter" pkg="my_pipeline" type="performance_meter" output="screen"/>

  <node name="rvizesdfvisualisation" pkg="rviz" type="rviz" output="log" args="-d $(find my_pipeline)/cfg/airsim_groundtruth_esdf.rviz" />

<node name="segmentator" pkg="tdnet_nyud" type="segmentation.py" output="screen">
   <remap from="image_raw" to="/$(arg cam_name)/image_raw" />
</node>

</launch>