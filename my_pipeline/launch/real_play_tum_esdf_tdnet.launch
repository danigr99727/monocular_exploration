<?xml version="1.0"?>
<launch>
    <arg name="vocabulary_path" default="$(find orb_slam2_cuda)/Vocabulary/ORBvoc.txt" />
    <arg name="camera_setting_path" default="$(find my_pipeline)/calibration/TUM1_rect.yaml" />
    <arg name="bUseViewer" default="true" />
    <arg name="bEnablePublishROSTopic" default="true" />


    <arg name="cam_name" default="openni_camera" />

    <node pkg="rosbag" type="play" name="player" output="screen" args="--clock -r 0.2 /root/TUM_office_recording.bag " launch-prefix="bash -c 'sleep 7; $0 $@' "/>


   <node name="orb_slam2_cuda" pkg="orb_slam2_cuda" type="Mono" output="screen"
    	<param name="voc_file" value="$(arg vocabulary_path)"/>
    	<param name="settings_file" value="$(arg camera_setting_path)"/>
    	<remap from="/camera/image_raw" to="/camera/rgb/image_rect"/>
    	<remap from="/transform" to="/orb_slam2/transform"/>
  	</node>

    <!-- from flame nodelet launch -->

    <arg name="keyframes" default="keyframes" />

    <arg name="namespace" default="flame" />
    <arg name="manager" default="manager" />
    <arg name="standalone" default="true" />
    <arg name="output_dest" default="screen" />

    <arg name="load_params" default="true" />
    <arg name="param_file" default="flame_nodelet.yaml" />

    <arg name="bag_data" default="false" />

     <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="body_to_camera"
            args="0.0 0.0 0.0 0 0 0 0 body $(arg cam_name)" >
      </node> -->


    <group ns="$(arg namespace)" >


      <arg name="world_frame_id" default="world" />
      <arg name="camera_world_frame_id" default="camera_world" />
          <node pkg="tf2_ros" type="static_transform_publisher" name="camera_world_to_world"
               args="0.0 0.0 0.0 0.5 -0.5 0.5 -0.5 $(arg world_frame_id) $(arg camera_world_frame_id)" >
          </node>


        <!-- Launch the nodelet manager. -->
        <node if="$(arg standalone)"
              pkg="nodelet" type="nodelet" name="$(arg manager)"
              args="manager" output="$(arg output_dest)" >
        </node>

        <!-- Launch the nodelet.. -->
        <node pkg="nodelet" type="nodelet" name="flame_nodelet"
              args="load flame_ros/FlameNodelet $(arg manager)"
              output="$(arg output_dest)" launch-prefix="bash -c 'sleep 7; $0 $@' ">
          <rosparam command="load" if="$(arg load_params)" file="$(find my_pipeline)/cfg/$(arg param_file)"/>
          <remap from="/image" to="/camera/rgb/image_rect" />
         <remap from="/info" to="/camera/rgb/camera_info" />
          <remap from="/transform" to="/orb_slam2/transform"/>
          <remap from="keyframes" to="$(arg keyframes)" />
        </node>

    </group>

 <!--   <node name="rvizfiestavisualisation" pkg="rviz" type="rviz" output="log" args="-d $(find my_pipeline)/cfg/flame.rviz" /> -->

  <!-- size of map, change the size in x, y, z according to your application -->
  <arg name="map_size_x" value="50.0"/>
  <arg name="map_size_y" value="50.0"/>
  <arg name="map_size_z" value=" 20.0"/>

  <!-- topic of your odometry such as VIO or LIO -->

    <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 world navigation 100" />

  <!-- main algorithm params -->
  <include file="$(find my_pipeline)/launch/algorithm_esdf.xml">

    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>

    <!-- sensor pose: transform of camera frame in the world frame -->
    <arg name="sensor_pose_topic" value="/orb_slam2/transform"/>
    <!-- depth topic: depth image, 640x480 by default -->
    <!-- cloud topic: point cloud measurement  -->
    <!-- subscribe ONLY TO ONE of the two topics -->
    <arg name="depth_topic" value="/flame/depth_registered/image_rect"/>
    <arg name="semantic_topic" value="/semantic"/>
    <!--<arg name="cloud_topic" value="/pcl_render_node/cloud"/> -->

    <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="318.643040"/>
    <arg name="cy" value="255.313989"/>
    <arg name="fx" value="517.306408"/>
    <arg name="fy" value="516.469215"/>
    <!-- maximum velocity and acceleration the drone will reach -->
    <arg name="max_vel" value="2.0" />
    <arg name="max_acc" value="2.0" />
  </include>

    <node name="rvizesdfvisualisation" pkg="rviz" type="rviz" output="log" args="-d $(find my_pipeline)/cfg/semantic_esdf.rviz" />
    <node name="segmentator" pkg="tdnet_nyud" type="segmentation.py" output="screen">
       <remap from="image_raw" to="/camera/rgb/image_rect_color" />
    </node>


</launch>
